plugins {
    id 'com.android.application'
}
def keystorePropertiesFile = rootProject.file("ant.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
print(keystoreProperties)
android{

    compileSdkVersion rootProject.ext.compileVersion
    buildToolsVersion rootProject.ext.buildToolVersion

    defaultConfig {
        applicationId rootProject.ext.pkg
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode  rootProject.ext.versionCode
        versionName  rootProject.ext.versionName
        manifestPlaceholders = [
                sharedUserId  : rootProject.ext.sharedUserId,
                versionName  : rootProject.ext.versionName,
                mainChId     : rootProject.ext.mainChId,
                subChId      : rootProject.ext.subChId,
                APPLOG_SCHEME: "rangersapplog.d6bbf88017f43bce"
        ]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        main {
            keyAlias keystoreProperties['key.alias']
            keyPassword keystoreProperties['key.alias.password']
            storeFile file(keystoreProperties['key.store'])
            storePassword keystoreProperties['key.store.password']
        }
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.main
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.main
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding{
        enabled = true
    }

    variantFilter { variant ->
        def names = variant.flavors.name
        if (variant.buildType.name == "debug" ) {
//            variant.ignore = true
        } else {
            println(" ----- release name:" + names[0])
        }
    }

}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            if (variant.buildType.name == "release") {
                output.outputFileName = "${applicationId}_${rootProject.ext.mainChId}_${rootProject.ext.subChId}_release.apk"
            }

        }
    }
}
build.doLast {
    FileTree apks = fileTree(dir: "${buildDir}" + "/outputs/apk/release", include: ['*.apk'])
    apks.each { File file ->
        if (file.name.endsWith("unaligned.apk")) {
            delete file
        } else {
            copy {
                from file
                into "${buildDir}" + "/outputs/apk/"
            }
        }
    }
}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation fileTree(dir: "libs", include: ["*.aar"])

    annotationProcessor "androidx.room:room-compiler:2.2.6"

    implementation project(":middleware")
    implementation project (':MirrorPlugin:virtual')
    testImplementation 'junit:junit:4.+'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'commons-io:commons-io:2.11.0'
//    implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
//    runtimeOnly 'org.conscrypt:conscrypt-android:2.5.2'
//    implementation 'org.conscrypt:conscrypt-openjdk-uber:2.5.2'
    implementation 'com.belerweb:pinyin4j:2.5.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}